----------------------------------------------------------------------------------------------------------------------
GUIDE ZUR D0KUMENTATI0N VON C0DE
----------------------------------------------------------------------------------------------------------------------

Vorlage zur einheitlichen Dokumentation von Programmcode.

ACHTUNG:
Jede Quelldatei muss alle Matrikelnummern enthalten!

----------------------------------------------------------------------------------------------------------------------

1. Jeder Eintrag im Code sollte eine kurze Beschreibung zum Nutzen der Funktion enthalten und was diese macht.

Es soll möglichst jede Funktion dokuemntiert werden.
Ausgenommen sind getter, setter, etc.

Leerzeilen im Code verbessern zT. die Lesbarkeit. ;)

------ SCHABL0NE: ------

// A-X.Y:
// {Anforderungsbeschreibung}
//
// {Dokumentationstext}
func f() {
    ...
}

------ BEISPIEL: ------

// A-3.2:
// Der Zugang für die Bearbeiter soll durch Benutzernamen und Passwort geschützt sein.
//
// Authentifizierung des Benutzers.
// Die Eingaben des Nutzers werden mit gespeicherten Credentials abgeglichen.
func LoginHandler(response http.ResponseWriter, request *http.Request) {
	inputUsername := request.FormValue("username")
	inputPassword := request.FormValue("password")
	redirectTarget := "/"

	if inputUsername != "" && inputPassword != "" {
		// Lade die aktuellen Daten für registrierte Nutzer.
		refreshUserData()

		// Überprüfe, ob der Benutzer registriert ist und prüfe dann das Passwort.
		for i := 0; i < len(users.Users); i++ {
			if users.Users[i].Username == inputUsername {

				// Berechne den Hashwert des Input-Passworts mit dem Salt-Wert, der zum verifizerten Benutzer gehört.
				// Die Authentifizerung war erfolgreich, wenn dieser Hashwert mit dem Gespeicherten übereinstimmt.
				if GetHash(inputPassword, users.Users[i].Salt) == users.Users[i].Password {
					setSession(users.Users[i].ID, users.Users[i].Username, response)
					redirectTarget = "/internal"
				}
			}
		}
	}

	http.Redirect(response, request, redirectTarget, 302)
}

----------------------------------------------------------------------------------------------------------------------

2. Für Hilfsfunktionen und Funktionen, die nicht eindeutig einer Anforderung zugeordnet werden können, genügt eine
   kurze/einzeilige Beschreibung.

------ SCHABL0NE: ------

// {Beschreibungstext}
func f() {
    ...
}

------ BEISPIEL: ------

// Lies users.json und importiere alle Benutzerdaten nach &users.
func refreshUserData() {
	userData, err := ioutil.ReadFile("./assets/users.json")
	if err != nil {
		fmt.Print(err)
	}

	err = json.Unmarshal(userData, &users)
	if err != nil {
		fmt.Print(err)
	}
}
